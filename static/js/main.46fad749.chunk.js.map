{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/itemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","itemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46fad749.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container\r\n} from 'reactstrap';\r\n\r\nexport default class AppNavbar extends Component {\r\n\r\n  state = {\r\n    isOpen: false\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n          <Container>\r\n            <NavbarBrand href=\"/\">ShopList</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle}/>\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                  <NavLink href=\"https://github.com/rjbatula\">Github</NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","//Import action types\r\nimport axios from 'axios';\r\nimport  { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\nexport const getItems = () => dispatch => {\r\n  dispatch(setItemsLoading());\r\n  axios.get('/api/items').then(res => dispatch({type: GET_ITEMS, payload: res.data}))\r\n};\r\n\r\nexport const deleteItem = (id) => dispatch => {\r\n  axios.delete(`api/items/${id}`).then(res => dispatch({type: DELETE_ITEM, payload: id}))\r\n};\r\n\r\nexport const addItem = (item) => dispatch => {\r\n  axios.post('/api/items', item).then(res => dispatch({type: ADD_ITEM, payload: res.data}))\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return{\r\n    type:ITEMS_LOADING\r\n  };\r\n};","//Set actions to constant of strings\r\nexport const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\n","import React, { Component } from 'react'\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass ShoppingList extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.getItems();\r\n  }\r\n\r\n  onDeleteClick = (id) => {\r\n    this.props.deleteItem(id);\r\n  }\r\n\r\n  render() {\r\n    //Destructure items - pulling out this.state from items\r\n    const { items } = this.props.item;\r\n\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <ListGroup>\r\n            <TransitionGroup className=\"shopping-list\">\r\n              {items.map(({_id, name}) => (\r\n                <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                  <ListGroupItem>\r\n                    <Button className=\"remove-btn\" color=\"danger\" size=\"sm\" onClick={this.onDeleteClick.bind(this, _id)}>&times;</Button>\r\n                    {name}\r\n                  </ListGroupItem>\r\n                </CSSTransition>\r\n              ))}\r\n            </TransitionGroup>\r\n          </ListGroup>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nShoppingList.propTypes ={\r\n  getItems: PropTypes.func.isRequired,\r\n  item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList)\r\n","import React, { Component } from 'react'\r\nimport { Button,Modal,ModalHeader,ModalBody,Form,FormGroup,Label,Input } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\nclass itemModal extends Component {\r\n\r\n  state = {\r\n    modal: false,\r\n    name: ''\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n\r\n    e.preventDefault();\r\n    \r\n    const newItem = {\r\n      name: this.state.name\r\n    }\r\n\r\n    //Add item via addItem action\r\n    this.props.addItem(newItem);\r\n\r\n    //Close modal\r\n    this.toggle();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.toggle}>Add Item</Button>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add to Shopping List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"item\">Item</Label>\r\n                <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add Shopping Item\" onChange={this.onChange}></Input>\r\n                <Button color=\"dark\" style={{marginTop: '2rem'}} block>Add Item</Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  item: state.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(itemModal);\r\n","//Reducer is where the state gonna be in\r\n//Check our actions\r\n//Initial State - comes from backend\r\n\r\n//Import action types\r\nimport  { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\n\r\nconst initialState = {\r\n  items:[],\r\n  loading: false\r\n}\r\n\r\n\r\nexport default function itemReducer(state = initialState, action) {\r\n  switch(action.type){\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false\r\n      }\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item._id !== action.payload)\r\n      }\r\n    case ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items]\r\n      }\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    default:\r\n      return state;  \r\n  }\r\n}\r\n","//Bring together all other reducers\r\nimport { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n  item: itemReducer\r\n});","//ENTRY POINT TO REDUX STORE\r\n//Import redux dependecies\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n//from ./reducers/index.js\r\nimport rootReducer from './reducers'\r\n\r\n//Create Initial State\r\nconst initialState = {};\r\n\r\n//Put any middleware we use inside an array which in this case only have thunk\r\nconst middleware = [thunk];\r\n\r\n//Create Store to take in reducer, init state and middleware\r\nconst store = createStore(rootReducer, initialState, compose(\r\n  applyMiddleware(...middleware),\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList'\nimport ItemModal from './components/itemModal'\nimport { Container } from 'reactstrap'\n\n//Bring in the provider from react redux which bind react and redux\nimport { Provider } from 'react-redux';\n//Import store file\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar/>\n        <Container>\n        <ItemModal />\n        <ShoppingList/>\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}